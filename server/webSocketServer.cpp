#include <iostream>#include <boost/asio.hpp>#include <boost/beast.hpp>#include <optional>#include "WebSocketSession.h"namespace asio = boost::asio;namespace beast = boost::beast;using tcp = asio::ip::tcp;typedef beast::websocket::stream<beast::tcp_stream> websocket;class WebSocketServer {public:    /**     * @brief 해당 포트에서 Client 연결을 대기     * @param ioContext     */    explicit WebSocketServer(asio::io_context& ioContext)            : acceptor_(ioContext, tcp::endpoint(tcp::v4(), 30080)),              socket_(ioContext)    {        startAccept();    }private:    /**     * @brief Client 연결 후, 새 WebSocketSession 인스턴스를 생성하고 초기화     */    void startAccept() {        acceptor_.async_accept(socket_, [this](const boost::system::error_code& ec) {            if (!ec) {                std::cout << "Client connected." << std::endl;                std::shared_ptr<WebSocketSession> session = std::make_shared<WebSocketSession>(std::move(socket_), sessions_);                session->start();            }            startAccept(); // Listen for new connections        });    }    tcp::acceptor acceptor_;    tcp::socket socket_;    std::vector<std::shared_ptr<WebSocketSession>> sessions_;};int main() {    try {        asio::io_context ioContext;        WebSocketServer webSocketServer(ioContext);        ioContext.run();    } catch (const std::exception& e) {        std::cerr << "Exception: " << e.what() << std::endl;    }    return 0;}